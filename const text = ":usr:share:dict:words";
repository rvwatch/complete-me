

  describe('suggest', () => {

    it('should be an method', () => {
      expect(trie.suggest).to.be.a('function');
    })

    it('Should return an array', () => {
      expect(trie.suggest('')).to.deep.equal([]);
    })

    it('Should suggest a word from the dictionary', () => {
      trie.populate(dictionary);
      trie.insert('pizz');

      expect(trie.suggest('pizz')).to.include.members(['pizza']);
    })

    it('Should suggest a word when given a letter', () => {
      trie.insert('pizza');
      trie.insert('apple');
      trie.insert('appeal');

      expect(trie.suggest('piz')).to.deep.equal(['pizza']);
    })

    it('Should take in a string', () => {
      trie.populate(dictionary);
      expect(trie.suggest('pot')).to.include.members(['pothunting', 'potleg']);
    })

    it('Should not be case sensitive', () => {
      trie.insert('pizza');
      trie.insert('Pizza');

      expect(trie.suggest('piz')).to.deep.equal(['pizza']);
    })

    it('Should suggest words with higher popularity before alphabeticle words', () => {
      trie.insert('pizza');
      trie.insert('pie');
      trie.insert('pass');

      trie.select('pizza');
      trie.select('pizza');

      trie.select('pie');

      expect(trie.suggest('p')).to.deep.equal(['pizza','pie', 'pass']);
    })

    it('Should not break the code if the current phrase matches no words', () => {
      trie.insert('apple');
      trie.insert('baby');
      trie.insert('cat');
      trie.insert('dog');

      expect(trie.suggest('el')).to.deep.equal([]);
    })

    it('Should not break the code if the current phrase is not a letter', () => {
      trie.insert('apple');
      trie.insert('baby');
      trie.insert('cat');
      trie.insert('dog');

      expect(trie.suggest('!')).to.deep.equal([]);
      expect(trie.suggest('?')).to.deep.equal([]);
    })

  })

  

  describe('delete', () => {
    
    it('should be an method', () => {
      expect(trie.delete).to.be.a('function');
    })

    it('should not suggest a word deleted from suggested words', () => {
      trie.insert('cat');
      trie.insert('cats');
      trie.insert('catch');
      trie.insert('catheter');
      trie.insert('catatonic');

      expect(trie.suggest('ca')).to.deep.equal(['cat', 'cats', 'catch', 'catheter', 'catatonic']);

      trie.delete('cat');

      expect(trie.suggest('ca')).to.deep.equal(['cats', 'catch', 'catheter', 'catatonic']);
    })

    it('should not suggest any deleted words from suggested words', () => {
      trie.insert('cat');
      trie.insert('cats');
      trie.insert('catch');
      trie.insert('catheter');
      trie.insert('catatonic');

      expect(trie.suggest('ca')).to.deep.equal(['cat', 'cats', 'catch', 'catheter', 'catatonic']);

      trie.delete('cat');

      expect(trie.suggest('ca')).to.deep.equal(['cats', 'catch', 'catheter', 'catatonic']);

      trie.delete('catch');

      expect(trie.suggest('ca')).to.deep.equal(['cats', 'catheter', 'catatonic']);

      trie.delete('catheter');
      
      expect(trie.suggest('ca')).to.deep.equal(['cats', 'catatonic']);
    })

    it('Should not suggest a deleted word from the dictionary', () => {
      trie.populate(dictionary);

      trie.delete('pizza');

      expect(trie.suggest('pizza')).to.not.include.members(['pizza']);
    })

    it('Should not suggest any deleted words from the dictionary', () => {
      trie.populate(dictionary);

      trie.delete('pizza');

      expect(trie.suggest('pizza')).to.not.include.members(['pizza']);

      trie.delete('pizzle');
      
      expect(trie.suggest('pizza', 'pizzle')).to.not.include.members(['pizza', 'pizzle']);

      trie.delete('attention');
      
      expect(trie.suggest('pizza', 'pizzle', 'attention')).to.not.include.members(['pizza', 'pizzle', 'attention']);
    })
  })
})
